import { useEffect, useState } from "react";
import Header from "../components/Header";
import { getTransactions } from "../api/finance";

const Advisor = () => {
  const [transactions, setTransactions] = useState<any[]>([]);
  const [advice, setAdvice] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchTransactions = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");

      const response = await getTransactions(token);
      setTransactions(Object.values(response.data));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", error);
    }
  };

  useEffect(() => {
    fetchTransactions();
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const generateAdvice = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

      const cleanedTransactions = transactions
        .slice(0, 30)
        .map(({ id, type, amount, note, date, category_id }) => ({
          id,
          type,
          amount,
          note,
          date,
          category_id,
        }));

      const res = await fetch("http://127.0.0.1:8000/api/advice", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          transactions: cleanedTransactions,
        }),
      });

      if (!res.ok) {
        const isJson = res.headers
          .get("content-type")
          ?.includes("application/json");

        if (isJson) {
          const err = await res.json();
          throw new Error(
            err.message || `–û—à–∏–±–∫–∞ ${res.status}: ${res.statusText}`
          );
        } else {
          const html = await res.text();
          throw new Error("–ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON: " + html.slice(0, 100));
        }
      }

      const data = await res.json();
      console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data); // ‚Üê –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
      if (!data.choices || !data.choices[0]?.message?.content) {
        setAdvice([
          "ü§ñ GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.",
        ]);
        return;
      }

      const gptText = data.choices[0].message.content;

      const lines = gptText
        .split("\n")
        .map((line: string) => line.trim())
        .filter((line: string) => line);

      setAdvice(lines);
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
      setAdvice([
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: " +
          (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."),
      ]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="page-wrapper">
      <Header userEmail={null} />

      <div
        className="advisor-container"
        style={{ maxWidth: "600px", margin: "0 auto", padding: "20px" }}
      >
        <h2>üß† AI-–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫</h2>
        <p>
          –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö
          —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
        </p>

        <button
          onClick={generateAdvice}
          disabled={loading}
          className="add-category-button"
          style={{ marginTop: "15px" }}
        >
          {loading ? "–ê–Ω–∞–ª–∏–∑..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"}
        </button>

        {advice.length > 0 && (
          <div style={{ marginTop: "25px" }}>
            <h3>üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
            <ul>
              {advice.map((item, index) => (
                <li key={index} style={{ marginBottom: "10px" }}>
                  {item}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default Advisor;
